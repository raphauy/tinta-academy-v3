generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(cuid())
  email         String  @unique                      // gennext: show.column
  clerkUserId   String  @unique                      // gennext: show.column
  firstName     String?                              // gennext: show.column
  lastName      String?                              // gennext: show.column
  imageUrl      String?                              // gennext: show.column

  createdAt     DateTime @default(now())             // gennext: skip.zod
  updatedAt     DateTime @updatedAt @default(now())  // gennext: skip.zod

  students      Student[]
}
model Student {
  id            String    @id @default(cuid())
  firstName     String                               // gennext: show.column
  lastName      String                               // gennext: show.column
  dateOfBirth   DateTime                             // gennext: show.column
  email         String    @unique                    // gennext: show.column
  phone         String                               // gennext: show.column
  address       String                               // gennext: show.column
  city          String                               // gennext: show.column
  zip           String?                              // gennext: show.column
  country       String   @default("Uruguay")

  createdAt     DateTime  @default(now())             // gennext: skip.zod
  updatedAt     DateTime  @updatedAt                  // gennext: skip.zod

  user          User @relation(fields: [userId], references: [id])
  userId        String
}

enum CourseType {
  WSET_LEVEL_1
  WSET_LEVEL_2
  WSET_LEVEL_3
  WSET_LEVEL_4
}

model Course {
  id                    String   @id @default(cuid())
  type                  CourseType
  totalDuration         Int                            // gennext: show.column
  startTime             String    @default("18:30")    // gennext: show.column
  classDuration         Int                            // gennext: show.column
  location              String                         // gennext: show.column
  maxCapacity           Int                            // gennext: show.column
  priceUSD              Float                          // gennext: show.column
  priceUYU              Float                          // gennext: show.column
  classDates            DateTime[]                     // gennext: show.column
  examDate              DateTime                       // gennext: show.column
  registrationDeadline  DateTime                       // gennext: show.column

  educator              Educator @relation(fields: [educatorId], references: [id])
  educatorId            String

  createdAt             DateTime @default(now())       // gennext: skip.zod
  updatedAt             DateTime @updatedAt            // gennext: skip.zod
}

model Educator {
  id                    String   @id @default(cuid())
  name                  String                         // gennext: show.column
  title                 String                         // gennext: show.column
  bio                   String                         // gennext: show.column
  imageUrl              String                         // gennext: show.column

  courses               Course[]                       // gennext: skip.list

  createdAt             DateTime @default(now())       // gennext: skip.zod
  updatedAt             DateTime @updatedAt            // gennext: skip.zod
}